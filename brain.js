const qrcode = require('qrcode-terminal');
const { Client } = require('whatsapp-web.js');
const { NeuralNetwork } = require('brain.js'); // Adicionando o brain.js
const client = new Client();

client.on('qr', qr => {
    qrcode.generate(qr, { small: true });
});

client.on('ready', () => {
    console.log('WhatsApp est√° conectado');
});

client.initialize();

// N√∫mero de WhatsApp para o qual o bot enviar√° a mensagem de notifica√ß√£o
const numeroNotificacao = 'NUMERO_DESTINO'; // Substitua pelo n√∫mero real

// Vari√°veis de estado para rastrear a etapa atual e o estado da aplica√ß√£o
const userState = {};
const userMemory = {};
const chatTimeout = 30 * 60 * 1000; // Tempo limite de 30 minutos em milissegundos
let isPaused = false;
let lastInteractionTime = Date.now(); // Armazena o hor√°rio da √∫ltima intera√ß√£o
let intentClassifier; // Vari√°vel para armazenar o modelo de classifica√ß√£o treinado

// Dados de treinamento para o modelo de classifica√ß√£o
const trainingData = [
    { input: 'quero um or√ßamento', output: { or√ßamento: 1 } },
    { input: 'preciso de um or√ßamento', output: { or√ßamento: 1 } },
    { input: 'iptv', output: { iptv: 1 } },
    { input: 'endere√ßo', output: { endere√ßo: 1 } },
    { input: 'onde fica', output: { endere√ßo: 1 } },
    { input: 'compra', output: { compra: 1 } },
    { input: 'quero comprar', output: { compra: 1 } },
    { input: 'garantia', output: { garantia: 1 } },
    { input: 'perdi o comprovante de garantia', output: { garantia: 1 } }
    // Adicione mais exemplos de treinamento conforme necess√°rio
];

// Fun√ß√£o para treinar o modelo de classifica√ß√£o de inten√ß√µes
function trainIntentClassifier() {
    const config = {
        hiddenLayers: [10, 5],
        activation: 'leaky-relu',
        iterations: 2000,
        learningRate: 0.01
    };
    const net = new NeuralNetwork(config);
    net.train(trainingData);

    intentClassifier = net.toFunction();
}

// Fun√ß√£o para classificar a inten√ß√£o da mensagem do usu√°rio
function classifyIntent(message) {
    if (!intentClassifier) {
        trainIntentClassifier();
    }

    const result = intentClassifier(message);
    return Object.keys(result).reduce((a, b) => (result[a] > result[b] ? a : b));
}

client.on('message', async (message) => {
    if (message.body && !message.isGroupMsg) {
        const phone = message.from;

        if (!userMemory[phone]) {
            userMemory[phone] = {};
        }

        // Atualiza o hor√°rio da √∫ltima intera√ß√£o com o usu√°rio
        lastInteractionTime = Date.now();

        // Classifica a inten√ß√£o da mensagem do usu√°rio
        const userIntent = classifyIntent(message.body.toLowerCase());

        // Restante do c√≥digo do chatbot
        // ...

        // Se o chat estiver pausado, retorna sem executar outras a√ß√µes
        if (isPaused) {
            return;
        }

        if (!userState[phone]) {
            // Primeira mensagem do usu√°rio, fornecer as op√ß√µes
            userState[phone] = 'waitingForOption';
            await sendWelcomeMessage(message);
        } else {
            const escolhaOpcao = message.body;
            let response;

            // Restante do c√≥digo do chatbot
            // ...
        }
    }
});

async function sendWelcomeMessage(message) {
    const welcomeMessage = 'Brothers eletr√¥nica agradece seu contato, em que posso ajudar? üòâ\n' +
        '1Ô∏è‚É£ OR√áAMENTO\n' +
        '2Ô∏è‚É£ IPTV\n' +
        '3Ô∏è‚É£ ENDERE√áO\n' +
        '4Ô∏è‚É£ COMPRA\n' +
        '5Ô∏è‚É£ GARANTIA\n' +
        '6Ô∏è‚É£ FALAR COM ATENDENTE';

    const optionsMessage = await message.reply(welcomeMessage);
    console.log('Mensagem enviada com op√ß√µes:', optionsMessage.body);
}

// Fun√ß√£o para verificar o tempo limite e retornar se necess√°rio
async function checkTimeoutAndReturn() {
    if (!isPaused && Date.now() - lastInteractionTime >= chatTimeout) {
        isPaused = false;
        await client.sendMessage(numeroNotificacao, 'Desculpe, parece que o usu√°rio ficou inativo por muito tempo. O chatbot est√° dispon√≠vel novamente. Como posso ajudar?');
    }

    // Agendando a pr√≥xima verifica√ß√£o ap√≥s um intervalo de tempo
    setTimeout(checkTimeoutAndReturn, chatTimeout);
}

// Iniciar a verifica√ß√£o do tempo limite
checkTimeoutAndReturn();
